<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>SnippetFile1</Title>
      <Author>yzn</Author>
      <Description>sun控制器</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>sunctr</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>Microsoft.AspNetCore.Mvc</Namespace>
        </Import>
        <Import>
          <Namespace>Microsoft.Extensions.Localization</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>pname</ID>
          <ToolTip>小写开头的名称</ToolTip>
          <Default>name</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>name</ID>
          <ToolTip>大写开头的名称</ToolTip>
          <Default>Name</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>PartsControllerBase</ID>
          <ToolTip>基类名称</ToolTip>
          <Default>PartsControllerBase</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[    [ApiVersion("1.0")]
    [Route("/api/v{version:apiVersion}/$pname$s")]
    public class $name$Controller : $PartsControllerBase$ {
        private readonly IStringLocalizer<$name$Controller> _localizer;
        private readonly I$name$Service _$pname$Service;

        public $name$Controller(IStringLocalizer<$name$Controller> localizer,
                              I$name$Service $pname$Service) {
            _localizer = localizer;
            _$pname$Service = $pname$Service;
        }

        /// <summary>
        /// 新增
        /// </summary>
        /// <param $name$="input"></param>
        /// <returns></returns>
        [HttpPost]
        public IActionResult Insert$name$([FromBody] Post$name$Input input) {
            _$pname$Service.Insert$name$(input);
            return Ok(new { message = L("Success") });
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <param $name$="id"></param>
        /// <param $name$="input"></param>
        /// <returns></returns>
        [HttpPut()]
        public IActionResult Update$name$([FromBody] Put$name$Input input) {
            _$pname$Service.Update$name$(input);
            return Ok(new { message = L("Success") });
        }
       
       [HttpGet]
        public async Task<IActionResult> Get$name$s([FromQuery]Get$name$sInput input, [FromQuery]PageRequest page) {
            if (string.IsNullOrWhiteSpace(page.SortField)) {
                page.SortField = nameof(Get$name$Output.Code);
                page.IsDesc = false;
            }
            return Ok(ResponseBody.From(await _$pname$Service.Get$name$s(input, page)));
        }

        /// <summary>
        /// 详情
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public IActionResult Get$name$ById(Guid id) {
            return Ok(ResponseBody.From(_$pname$Service.Get$name$ById(id)));
        }

        [HttpGet("export")]
        public async Task<IActionResult> Export$name$sAsync([FromServices]IFilesService filesService, [FromQuery]Get$name$sInput input) {
            var $pname$s = await _$pname$Service.Export$name$sAsync(input);
            var fileName = $"{L("Export$name$FileName")}.xlsx";
            return Ok(ResponseBody.From<string>(filesService.SaveToExcel($pname$s, fileName)));
        }

        [HttpPut("{id}/abandon")]
        public IActionResult Abandon$name$(Guid id, [FromBody] RowVersionBody input)
        {
            _$pname$Service.Abandon(id, input);
            return Ok(new { message = L("Success") });
        }
    }
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>