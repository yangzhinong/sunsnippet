<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Keywords>
        <Keyword>sunapps</Keyword>
      </Keywords>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>SnippetFile1</Title>
      <Author>yzn</Author>
      <Description>Part的Application服务类代码提示</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>sunapps</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.ComponentModel.DataAnnotations</Namespace>
        </Import>
        <Import>
          <Namespace>Abp.Domain.Repositories</Namespace>
        </Import>
        <Import>
          <Namespace>Abp.UI</Namespace>
        </Import>
        <Import>
          <Namespace>AutoMapper</Namespace>
        </Import>
        <Import>
          <Namespace>Microsoft.Extensions.Localization</Namespace>
        </Import>
        <Import>
          <Namespace>Sunlight.Abstractions</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>name</ID>
          <ToolTip>服务名称（不含后缀)</ToolTip>
          <Default>Name</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>pname</ID>
          <ToolTip>小写开头名称</ToolTip>
          <Default>name</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>PartsAppServiceBase</ID>
          <ToolTip>基类名称</ToolTip>
          <Default>PartsAppServiceBase</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[    internal class $name$Service : $PartsAppServiceBase$, I$name$Service {
        private readonly IMapper _mapper;
        private readonly IStringLocalizer<$name$Service> _localizer;
        private readonly IRepository<$name$, Guid> _$pname$Repository;
        private readonly I$name$Manager _$pname$Manager;

        public $name$Service(IRepository<$name$, Guid> $pname$Repository,
            IMapper mapper,
            IStringLocalizer<$name$Service> localizer,
            I$name$Manager $pname$Manager) {
            _$pname$Repository = $pname$Repository;
            _mapper = mapper;
            _localizer = localizer;

            _$pname$Manager = $pname$Manager;
        }

        public void Insert$name$(Post$name$Input input) {
           
        }

        public void Update$name$(Guid id, Put$name$Input input) {
            
        }

        public async Task<Page<Get$name$Output>> Get$name$s(Get$name$Input input,PageRequest page) {
            var query = Query(input);
            var count = await query.CountAsync();
            var result = await query.PageAndOrderBy(page).ToListAsync();
            return new Page<Get$name$Output>(page, count, _mapper.Map<List<Get$name$Output>>(result));
        }

        public IQueryable<$name$> Query(Get$name$Input input) {
            var result = _$pname$Repository.GetAll()
                .WhereIf(!string.IsNullOrEmpty(input.Code), r => r.Code.Contains(input.Code))
                .WhereIf(input.Status != null, r => r.Status == input.Status);
            return result;
        }

    }
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>